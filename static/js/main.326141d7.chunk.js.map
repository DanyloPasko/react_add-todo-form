{"version":3,"sources":["api/users.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","api/todos.ts","index.tsx"],"names":["id","name","username","email","UserInfo","user","className","href","TodoInfo","todo","completed","title","classNames","TodoList","todos","map","findUserById","userId","usersFromServer","find","todoWithUsers","App","useState","setTitle","isValidTitle","setIsValidTitle","selectedOption","setSelectedOption","isValidSelectedOption","setIsValidSelectedOption","setTodos","onSubmit","event","preventDefault","trim","prevTodos","array","newTodo","Math","max","element","htmlFor","type","value","placeholder","onChange","target","disabled","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.326141d7.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","import React from 'react';\nimport { User } from '../../types/User';\n\ntype Props = {\n  user: User,\n};\n\nexport const UserInfo: React.FC<Props> = ({ user }) => {\n  return (\n    <a\n      className=\"UserInfo\"\n      href={`mailto:${user.email}`}\n    >\n      {user.name}\n    </a>\n  );\n};\n","import React from 'react';\nimport classNames from 'classnames';\n\nimport { Todo } from '../../types/Todo';\nimport { UserInfo } from '../UserInfo';\n\ntype Props = {\n  todo: Todo,\n};\n\nexport const TodoInfo: React.FC<Props> = ({ todo }) => {\n  const {\n    id,\n    completed,\n    title,\n    user,\n  } = todo;\n\n  return (\n    <article\n      data-id={id}\n      className={classNames(\n        'TodoInfo',\n        { 'TodoInfo--completed': completed },\n      )}\n    >\n      <h2 className=\"TodoInfo__title\">{title}</h2>\n\n      {user && <UserInfo user={user} />}\n    </article>\n  );\n};\n","import React from 'react';\nimport { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types/Todo';\n\ntype Props = {\n  todos: Todo[],\n};\n\nexport const TodoList: React.FC<Props> = ({ todos }) => {\n  return (\n    <section className=\"TodoList\">\n      {todos.map(todo => (\n        <TodoInfo key={todo.id} todo={todo} />\n      ))}\n    </section>\n  );\n};\n","import './App.scss';\nimport React, { useState } from 'react';\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList/TodoList';\nimport { Todo } from './types/Todo';\n\nconst findUserById = (userId: number) => {\n  return usersFromServer.find(user => user.id === userId) || null;\n};\n\nconst todoWithUsers = todosFromServer.map(todo => ({\n  ...todo,\n  user: findUserById(todo.userId),\n}));\n\nconst calculateNewId = (array: Todo[]) => {\n  const maxId = (Math.max(...array.map(element => element.id)));\n  const newId = maxId + 1;\n\n  return newId;\n};\n\nexport const App = () => {\n  const [title, setTitle] = useState('');\n  const [isValidTitle, setIsValidTitle] = useState(true);\n  const [selectedOption, setSelectedOption] = useState(0);\n  const [isValidSelectedOption, setIsValidSelectedOption] = useState(true);\n  const [todos, setTodos] = useState(todoWithUsers);\n\n  const handleInputChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setTitle(event.target.value);\n    setIsValidTitle(true);\n  };\n\n  const handleSelectChange = (event: React.ChangeEvent<HTMLSelectElement>) => {\n    setSelectedOption(+event.target.value);\n    setIsValidSelectedOption(true);\n  };\n\n  const addNewTodo = (() => setTodos(prevTodos => {\n    const newTodo = {\n      id: calculateNewId(prevTodos),\n      title,\n      completed: false,\n      userId: selectedOption,\n      user: findUserById(selectedOption),\n    };\n\n    return ([...prevTodos, newTodo]);\n  }));\n\n  const handleFormSubmit = (\n    (event: React.FormEvent<HTMLFormElement>) => {\n      event.preventDefault();\n\n      if (title.trim() && selectedOption) {\n        addNewTodo();\n        setTitle('');\n        setSelectedOption(0);\n\n        return;\n      }\n\n      if (!selectedOption) {\n        setIsValidSelectedOption(false);\n      }\n\n      if (!title.trim()) {\n        setIsValidTitle(false);\n      }\n    });\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"field\">\n          <label htmlFor=\"title\">{'Title: '}</label>\n\n          <input\n            type=\"text\"\n            data-cy=\"titleInput\"\n            value={title}\n            placeholder=\"Enter a title\"\n            onChange={handleInputChange}\n          />\n          {!isValidTitle && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"user\">{'User: '}</label>\n\n          <select\n            data-cy=\"userSelect\"\n            value={selectedOption}\n            onChange={handleSelectChange}\n          >\n            <option value=\"0\" disabled>Choose a user</option>\n\n            {usersFromServer.map(user => (\n              <option key={user.id} value={user.id}>{user.name}</option>\n            ))}\n          </select>\n          {!isValidSelectedOption && (\n            <span className=\"error\">Please choose a user</span>)}\n        </div>\n        <button\n          type=\"submit\"\n          data-cy=\"submitButton\"\n        >\n          Add\n        </button>\n      </form>\n      <TodoList todos={todos} />\n    </div>\n  );\n};\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}